generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String  @unique
  password String?

  name    String @default("Not specified")
  picture String @default("/uploads/no-user-image.png")

  store Store[]

  favorites Product[]
  reviews   Review[]
  orders    Order[]

  @@map("user")
}

model Store {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String  @unique
  password String?

  title       String
  description String?

  user   User?   @relation(fields: [userID], references: [id])
  userID String? @map("user_id")

  products   Product[]
  categories Category[]
  colors     Color[]
  reviews    Review[]
  orderItems OrderItem[]

  @@map("store")
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  price       Int
  images      String[]

  reviews   Review[]
  orderItem OrderItem[]

  store   Store?  @relation(fields: [storeID], references: [id])
  storeID String? @map("store_id")

  category   Category? @relation(fields: [categoryID], references: [id])
  categoryID String?   @map("category_id")

  color   Color?  @relation(fields: [colorID], references: [id])
  colorID String? @map("color_id")
  user    User?   @relation(fields: [userID], references: [id])
  userID  String? @map("user_id")
  Order   Order[]

  @@map("product")
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String

  products Product[]

  store   Store?  @relation(fields: [storeID], references: [id])
  storeID String? @map("store_id")

  @@map("category")
}

model Color {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String
  value String

  products Product[]

  store   Store?  @relation(fields: [storeID], references: [id])
  storeID String? @map("store_id")

  @@map("color")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text   String
  rating String

  user   User?   @relation(fields: [userID], references: [id])
  userID String? @map("user_id")

  product   Product? @relation(fields: [productID], references: [id])
  productID String?  @map("product_id")

  store   Store?  @relation(fields: [storeID], references: [id])
  storeID String? @map("store_id")

  @@map("review")
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)

  items OrderItem[]
  total Int

  user   User?   @relation(fields: [userID], references: [id])
  userID String? @map("user_id")

  product   Product? @relation(fields: [productID], references: [id])
  productID String?  @map("product_id")

  @@map("order")
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Int

  order   Order?  @relation(fields: [orderID], references: [id])
  orderID String? @map("order_id")

  store   Store?  @relation(fields: [storeID], references: [id])
  storeID String? @map("store_id")

  product   Product? @relation(fields: [productID], references: [id])
  productID String?  @map("product_id")

  @@map("order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
}
